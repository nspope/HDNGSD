// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sfs1d
arma::mat sfs1d(const arma::sp_mat saf, const arma::uvec block, const unsigned num_boot, const bool fold);
RcppExport SEXP _haplodiplo_sfs1d(SEXP safSEXP, SEXP blockSEXP, SEXP num_bootSEXP, SEXP foldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf(safSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type num_boot(num_bootSEXP);
    Rcpp::traits::input_parameter< const bool >::type fold(foldSEXP);
    rcpp_result_gen = Rcpp::wrap(sfs1d(saf, block, num_boot, fold));
    return rcpp_result_gen;
END_RCPP
}

// sfs2d
arma::cube sfs2d(const arma::sp_mat saf0, const arma::sp_mat saf1, const arma::uvec block, const unsigned num_boot, const bool fold);
RcppExport SEXP _haplodiplo_sfs2d(SEXP saf0SEXP, SEXP saf1SEXP, SEXP blockSEXP, SEXP num_bootSEXP, SEXP foldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf0(saf0SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf1(saf1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type num_boot(num_bootSEXP);
    Rcpp::traits::input_parameter< const bool >::type fold(foldSEXP);
    rcpp_result_gen = Rcpp::wrap(sfs2d(saf0, saf1, block, num_boot, fold));
    return rcpp_result_gen;
END_RCPP
}

// sfs3d
Rcpp::NumericVector sfs3d(const arma::sp_mat saf0, const arma::sp_mat saf1, const arma::sp_mat saf2, const arma::uvec block, const unsigned num_boot, const bool fold);
RcppExport SEXP _haplodiplo_sfs3d(SEXP saf0SEXP, SEXP saf1SEXP, SEXP saf2SEXP, SEXP blockSEXP, SEXP num_bootSEXP, SEXP foldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf0(saf0SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf1(saf1SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf2(saf2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type num_boot(num_bootSEXP);
    Rcpp::traits::input_parameter< const bool >::type fold(foldSEXP);
    rcpp_result_gen = Rcpp::wrap(sfs3d(saf0, saf1, saf2, block, num_boot, fold));
    return rcpp_result_gen;
END_RCPP
}

// FST
arma::mat FST(const arma::sp_mat saf0, const arma::sp_mat saf1, const arma::mat sfs);
RcppExport SEXP _haplodiplo_FST(SEXP saf0SEXP, SEXP saf1SEXP, SEXP sfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf0(saf0SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf1(saf1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sfs(sfsSEXP);
    rcpp_result_gen = Rcpp::wrap(FST(saf0, saf1, sfs));
    return rcpp_result_gen;
END_RCPP
}

// theta
arma::mat theta(const arma::sp_mat saf, const arma::mat sfs);
RcppExport SEXP _haplodiplo_theta(SEXP safSEXP, SEXP sfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type saf(safSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sfs(sfsSEXP);
    rcpp_result_gen = Rcpp::wrap(theta(saf, sfs));
    return rcpp_result_gen;
END_RCPP
}

// slider
arma::mat slider(arma::mat inp, arma::uvec coord, const unsigned window, const unsigned step);
RcppExport SEXP _haplodiplo_slider(SEXP inpSEXP, SEXP coordSEXP, SEXP windowSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type window(windowSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(slider(inp, coord, window, step));
    return rcpp_result_gen;
END_RCPP
}

// hfs1d
arma::mat hfs1d(const arma::sp_mat shf, const arma::uvec weights);
RcppExport SEXP _haplodiplo_hfs1d(SEXP shfSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type shf(shfSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(hfs1d(shf, weights));
    return rcpp_result_gen;
END_RCPP
}

// basis
Rcpp::NumericVector basis(arma::cube hfs3d, arma::umat config0, arma::umat config1, arma::umat config2);
RcppExport SEXP _haplodiplo_basis(SEXP hfs3dSEXP, SEXP config0SEXP, SEXP config1SEXP, SEXP config2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type hfs3d(hfs3dSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type config0(config0SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type config1(config1SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type config2(config2SEXP);
    rcpp_result_gen = Rcpp::wrap(basis(hfs3d, config0, config1, config2));
    return rcpp_result_gen;
END_RCPP
}

// cycle_cube
arma::cube cycle_cube(const arma::cube& inp);
RcppExport SEXP _haplodiplo_cycle_cube(SEXP inpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type inp(inpSEXP);
    rcpp_result_gen = Rcpp::wrap(cycle_cube(inp));
    return rcpp_result_gen;
END_RCPP
}

// hypergeometric_basis
arma::mat hypergeometric_basis(unsigned N, unsigned n);
RcppExport SEXP _haplodiplo_hypergeometric_basis(SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(hypergeometric_basis(N, n));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_Haplodiplo();

static const R_CallMethodDef CallEntries[] = {
    {"_haplodiplo_sfs1d", (DL_FUNC) &_haplodiplo_sfs1d, 4},
    {"_haplodiplo_sfs2d", (DL_FUNC) &_haplodiplo_sfs2d, 5},
    {"_haplodiplo_sfs3d", (DL_FUNC) &_haplodiplo_sfs3d, 6},
    {"_haplodiplo_FST", (DL_FUNC) &_haplodiplo_FST, 3},
    {"_haplodiplo_theta", (DL_FUNC) &_haplodiplo_theta, 2},
    {"_haplodiplo_slider", (DL_FUNC) &_haplodiplo_slider, 4},
    {"_haplodiplo_hfs1d", (DL_FUNC) &_haplodiplo_hfs1d, 2},
    {"_haplodiplo_basis", (DL_FUNC) &_haplodiplo_basis, 4},
    {"_haplodiplo_cycle_cube", (DL_FUNC) &_haplodiplo_cycle_cube, 1},
    {"_haplodiplo_hypergeometric_basis", (DL_FUNC) &_haplodiplo_hypergeometric_basis, 2},
    {"_rcpp_module_boot_Haplodiplo", (DL_FUNC) &_rcpp_module_boot_Haplodiplo, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_haplodiplo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
